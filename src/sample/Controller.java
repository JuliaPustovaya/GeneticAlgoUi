package sample;

import Exp3.*;
import GA.*;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.chart.LineChart;
import javafx.scene.chart.NumberAxis;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.ListView;
import javafx.scene.control.TextField;

import java.net.URL;
import java.util.ArrayList;
import java.util.ResourceBundle;

import static Exp3.Coefficients.*;
import static Exp3.ErrorCoeficients.RMSE;
import static Exp3.Forecasting.printForecastedValues;
import static Exp3.UpdatedTimeSeria.getUpdatedTimeSeria;
import static GA.CleanStaticVariables.cleanStaticVariables;
import static GA.Crossover.childrenListAfterCrossover;

public class Controller implements Initializable {

    public static String globalFilePath;

    @FXML
    public LineChart lineChart;
    @FXML
    public Button forecast, autogenerated, loaddate1, savedate1, cleandate1;
    @FXML
    public TextField textFieldL, textFieldm, alfa, betta, gamma;
    @FXML
    public NumberAxis xAxis, yAxis;
    @FXML
    public Label Reflaction;
    @FXML
    public ListView list1InitialData, list1IPredictedData;

    @FXML
    public void getForecast(ActionEvent ev) {
        makeForecastByInput(lineChart, textFieldL, textFieldm, list1IPredictedData,alfa,betta,gamma);
    }

    @FXML
    public void loadDate1(ActionEvent ev) {
        try {
            timeSeria.clear();
            updatedTimeSerias.clear();
            realResult.clear();
            ReadFromFile.openFile(timeSeria, realResult);
        } catch (Exception ex) {
        }
        ReflactionDataInListViews.reflactDataIntoListView(list1InitialData, timeSeria);
        BuildingCharts.buildChart(lineChart, timeSeria);

    }

    @FXML
    public void saveDate1(ActionEvent ev) {
    }

    @FXML
    public void cleanDate1(ActionEvent ev) {
        timeSeria.clear();
        list1InitialData.getItems().clear();
        list1IPredictedData.getItems().clear();
        lineChart.getData().clear();
        cleanStaticVariables();
        Cleaning.cleanVaribles();

    }

    public static ArrayList<TimeSeria> timeSeria = new ArrayList<TimeSeria>();
    public static ArrayList<UpdatedTimeSeria> updatedTimeSerias = new ArrayList<UpdatedTimeSeria>();
    public static ArrayList<Double> realResult = new ArrayList<>();
    public static ArrayList<Double> forecastResult = new ArrayList<>();

    @Override
    public void initialize(URL url, ResourceBundle rb) {
    }

    public static void makeForecastByInput(LineChart lineChart1, TextField textFieldL, TextField textFieldm, ListView l,TextField alfa,TextField betta,TextField gamma) {
        updatedTimeSerias.clear();
        forecastResult.clear();
        L = Integer.parseInt(textFieldL.getText());
        m = Integer.parseInt(textFieldm.getText());

        ALFA = Double.parseDouble(alfa.getText());
        BETTA = Double.parseDouble(betta.getText());
        GAMMA = Double.parseDouble(gamma.getText());
        System.out.println("Alfa= " + ALFA + ", Betta=  " + BETTA + ", Gamma=  " + GAMMA + ", Season=  " + L + " Quantity  of preficted data=  " + m);
        InitialIndexis initialIndexis = new InitialIndexis();
        initialIndexis.formS0();
        initialIndexis.formB0();
        initialIndexis.formC0();
        System.out.println("s0 " + initialIndexis.getS0() + "\n" + "b0 " + initialIndexis.getB0() + "\n" + "c0 " + initialIndexis.getC0());
        FormattedIndexis formattedIndexis = new FormattedIndexis();
        for (int i = 1; i <= timeSeria.size(); i++) {
            formattedIndexis.formSt(i);
        }
        getUpdatedTimeSeria();
        Forecasting forecasting = new Forecasting();
        forecasting.getForecastedValues(updatedTimeSerias, m);
        printForecastedValues(forecastResult);
        ErrorCoeficients.getMSE(realResult, forecastResult);
        ErrorCoeficients.getE(realResult, forecastResult);
        BuildingCharts.buildChart(lineChart1, timeSeria, realResult, forecastResult);
        ReflactionDataInListViews.reflactDataIntoLists(l, realResult, forecastResult);
    }

    public static void getFitnessFunctionGA(double alfaXromocom, double bettaXromocom, double gammaXromocoma) {
        updatedTimeSerias.clear();
        forecastResult.clear();
        ALFA = alfaXromocom;
        BETTA = bettaXromocom;
        GAMMA = gammaXromocoma;
        System.out.println("Alfa= " + ALFA + ", Betta=  " + BETTA + ", Gamma=  " + GAMMA + ", Season=  " + L + " Quantity  of preficted data=  " + m);
        InitialIndexis initialIndexis = new InitialIndexis();
        initialIndexis.formS0();
        initialIndexis.formB0();
        initialIndexis.formC0();
        System.out.println("s0 " + initialIndexis.getS0() + "\n" + "b0 " + initialIndexis.getB0() + "\n" + "c0 " + initialIndexis.getC0());
        FormattedIndexis formattedIndexis = new FormattedIndexis();
        for (int i = 1; i <= timeSeria.size(); i++) {
            formattedIndexis.formSt(i);
        }
        getUpdatedTimeSeria();
        Forecasting forecasting = new Forecasting();
        forecasting.getForecastedValues(updatedTimeSerias, m);
        printForecastedValues(forecastResult);
        ErrorCoeficients.getMSE(realResult, forecastResult);
        ErrorCoeficients.getE(realResult, forecastResult);

    }

    @FXML
    public void getAutogenerated(ActionEvent ev) {
        GA(lineChart, textFieldL);
        ReflactionDataInListViews.reflactDataIntoLists(list1IPredictedData, realResult, forecastResult);

    }

    public static void GA(LineChart lineChart1, TextField textFieldL) {
        L = Integer.parseInt(textFieldL.getText());
        Population.makeRandomPopulation();
        for (int i = 0; i < 5; i++) {
            Population.makeRuletSelection();
            Selection.getParentsPairsForSelections(Population.selectedParentsForSelection);
            Crossover.getChidrenPairsDiscreteCrossover(Selection.parentsPairsForSelections);
            Mutation.RandomMutation(childrenListAfterCrossover);
            NewPopulation.selectXromocomaInNewPopulation(NewPopulation.formNewPopulation(Population.populationXromocoma, Mutation.childrenAfterMutation));

        }
        BuildingCharts.buildChart(lineChart1, timeSeria, realResult, forecastResult);
    }

    public static double getFitness(double alfa, double beta, double gam) {
        RMSE = 0.0;
        getFitnessFunctionGA(alfa, beta, gam);
        return RMSE;
    }
}